==================
Implemented a function for matrix multiplication
==================
Case 1: Perform matrix multiplication on matrix of same size
>>> matrix_mul = __import__('100-matrix_mul').matrix_mul
>>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
[[7, 10], [15, 22]]

>>> matrix_mul([[1, 2, 4], [3, 4, 5], [1, 2, 3]], [[1, 2, 3], [3, 4, 6], [1, 3, 4]])
[[11, 22, 31], [20, 37, 53], [10, 19, 27]]

Case 2: Different sizes
>>> matrix_mul([[1, 2, 3], [4, 5, 6]], [[7, 8], [9, 10], [11, 12]])
[[58, 64], [139, 154]]

>>> matrix_mul([[3, 4, 2]], [[13, 9, 7, 15], [8, 7, 4, 6], [6, 4, 0, 3]])
[[83, 63, 37, 75]]

Exception Cases
===============

::
Raises an exception if the arrays are empty
>>> matrix_mul([[3, 4, 2]], [])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/codedev/Projects/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 30, in matrix_mul
    b_cols, b_rows = check_matrix(m_b, 'm_b')
  File "/home/codedev/Projects/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 9, in check_matrix
    raise ValueError("{} can't be empty".format(name))
ValueError: m_b can't be empty

>>> matrix_mul([[]], [])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/codedev/Projects/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 29, in matrix_mul
    a_cols, a_rows = check_matrix(m_a, 'm_a')
  File "/home/codedev/Projects/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 11, in check_matrix
    raise ValueError("{} can't be empty".format(name))
ValueError: m_a can't be empty

::
Raises an exception if any element in the list is not an int or float

>>> matrix_mul('str', [[1, 2, 3]])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/codedev/Projects/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 29, in matrix_mul
    a_cols, a_rows = check_matrix(m_a, 'm_a')
  File "/home/codedev/Projects/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 7, in check_matrix
    raise TypeError("{} must be a list".format(name))
TypeError: m_a must be a list

>>> matrix_mul([[1, 2, 3]], 'str')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/codedev/Projects/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 30, in matrix_mul
    b_cols, b_rows = check_matrix(m_b, 'm_b')
  File "/home/codedev/Projects/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 7, in check_matrix
    raise TypeError("{} must be a list".format(name))
TypeError: m_b must be a list

Raises an exception if the arguments are not list of lists

::

>>> matrix_mul([[1, 2, 3]], [1, 3])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/codedev/Projects/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 30, in matrix_mul
    b_cols, b_rows = check_matrix(m_b, 'm_b')
  File "/home/codedev/Projects/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 13, in check_matrix
    raise TypeError("{} must be a list of lists".format(name))
TypeError: m_b must be a list of lists

Raises an exception if any element in any list in the matrix is not an integer or float.

>>> matrix_mul([[1, 2, 3]], [['str', 1, 2]])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/codedev/Projects/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 30, in matrix_mul
    b_cols, b_rows = check_matrix(m_b, 'm_b')
  File "/home/codedev/Projects/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 18, in check_matrix
    raise TypeError("{} should contain only integers or floats".format(name))
TypeError: m_b should contain only integers or floats

Raises an exception if they cannot be mutliplied

>>> matrix_mul([[1, 2, 3]], [[0, 1, 2]])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/codedev/Projects/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 32, in matrix_mul
    raise ValueError("m_a and m_b can't be multiplied")
ValueError: m_a and m_b can't be multiplied
