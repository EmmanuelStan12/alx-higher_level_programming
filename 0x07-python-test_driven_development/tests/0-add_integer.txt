===============================
 How to Use doctest_in_help.py
===============================

This library is very simple, since it only has one function called
``add_integer()``.

Numbers
=======

``add_integer()`` returns the sum of its arguments.  For numbers,
that value is equivalent to using the ``+`` operator.

::

>>> add_integer = __import__('0-add_integer').add_integer
>>> add_integer(2, 3)
5

It also works with floating-point values.

::

>>> add_integer(2.0, 3)
5

Non-Numbers
===========

Because the function only demands numbers it raises an exception if it encounters another type of any other argument.

::

>>> add_integer('a', 3)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/codedev/Projects/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 12, in add_integer
    raise TypeError("a must be an integer")
TypeError: a must be an integer

::

>>> add_integer(3, 'b')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/codedev/Projects/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 14, in add_integer
    raise TypeError("b must be an integer")
TypeError: b must be an integer
